// Generated by CoffeeScript 1.10.0
(function() {
  window.PDJSobj = (function() {
    PDJSobj.version = "PDJS-1.0.0";

    PDJSobj.prototype.logg = function(str) {
      if (this.logging) {
        return console.log(str);
      }
    };

    PDJSobj.prototype.req = function() {
      return this.req_count++;
    };

    function PDJSobj(params) {
      var ref;
      if (params == null) {
        params = {};
      }
      this.async = (ref = params.async === false) != null ? ref : {
        "false": true
      };
      this.token = params.token;
      this.refresh = params.refresh || 60;
      this.refresh_in_ms = this.refresh * 1000;
      this.protocol = params.protocol || "https";
      this.server = params.server || "pagerduty.com";
      this.logging = params.logging || false;
      this.req_count = 1;
      this.api_version = params.api_version || "v2";
      this.logg("Initializing PDJSobj");
    }

    PDJSobj.prototype.no_success_function = function(json, callerparams) {
      this.logg("no success function defined for " + callerparams.res);
      return this.logg(json);
    };

    PDJSobj.prototype.error_function = function(err, callerparams) {
      var anyerror, error, error_detail;
      console.log("Error for " + callerparams.res);
      console.log(err.status);
      error_detail = err.responseText;
      try {
        error_detail = JSON.parse(error_detail);
      } catch (error) {
        anyerror = error;
        this.logg("Not an JSON error");
      }
      return console.log(error_detail);
    };

    PDJSobj.prototype.api = function(params) {
      if (params == null) {
        params = {};
      }
      this.logg("Call to API: " + params.res);
      params.url = params.url || this.protocol + "://api." + this.server + "/" + params.res;
      params.attempt = params.attempt || 0;
      params.async = params.async || this.async;
      params.headers = params.headers || {};
      params.contentType = "application/json; charset=utf-8";
      params.dataType = "json";
      if(this.api_version == "v2"){
        params.accepts = {json: 'application/vnd.pagerduty+json;version=2'};
      }
      params.data = params.data || {};
      params.data.PDJSversion = PDJSobj.version;
      params.data.request_count = this.req();
      params.data.attempt = params.attempt++;
      this.logg("params.data:");
      this.logg(params.data);
      params.type = (params.type || "GET").toUpperCase();
      if (params.type === "POST" || params.type === "PUT") {
        params.data = JSON.stringify(params.data);
      }
      params.headers.Authorization = 'Token token=' + this.token;
      params.error = params.error || (function(_this) {
        return function(err) {
          return _this.error_function(err, params);
        };
      })(this);
      params.success = params.success || (function(_this) {
        return function(data) {
          return _this.no_success_function(data, params);
        };
      })(this);
      this.logg(params);
      return $.ajax(params);
    };

    PDJSobj.prototype.api_all = function(params, datasofar) {
      if (params == null) {
        params = {};
      }
      if (datasofar == null) {
        datasofar = [];
      }
      params.data = params.data || {};
      params.data.limit = 100;
      params.data.offset = params.data.offset || 0;
      params.final_success = params.final_success || (function(_this) {
        return function(data) {
          return _this.no_success_function(data, params);
        };
      })(this);
      params.incremental_success = params.incremental_success || (function(_this) {
        return function(data) {
          return 0;
        };
      })(this);
      params.success = (function(_this) {
        return function(data) {
          data.res = params.res;
          params.incremental_success(data[params.res]);
          datasofar = datasofar.concat(data[params.res]);
          window.datasofar = datasofar;
          window.d = data;
          if (data.total > data.limit + data.offset) {
            _this.logg("Getting more");
            params.data.offset += params.data.limit;
            return _this.api_all(params, datasofar);
          } else {
            _this.logg("All done");
            _this.logg(params);
            data[params.res] = datasofar;
            data.res = params.res;
            data.offset = 0;
            data.limit = data.total;
            _this.logg(data);
            return params.final_success(data);
          }
        };
      })(this);
      this.logg(params);
      return this.api(params);
    };

    PDJSobj.prototype.eventV1 = function(params) {
      if (params == null) {
        params = {};
      }
      this.logg("Create an event");
      params.type = "POST";
      params.url = params.url || this.protocol + "://events." + this.server + "/generic/2010-04-15/create_event.json";
      params.data = params.data || {};
      params.data.service_key = params.data.service_key || params.service_key || this.logg("No service key");
      params.data.event_type = params.data.event_type || params.event_type || "trigger";
      params.data.incident_key = params.data.incident_key || params.incident_key || "Please specify an incident_key";
      if (params.client) {
        params.data.client = params.data.client || params.client;
      }
      if (params.client_url) {
        params.data.client_url = params.data.client_url || params.client_url;
      }
      params.data.description = params.data.description || params.description || "No description provided";
      params.data.details = params.data.details || params.details || {};
      params.data.contexts = params.data.contexts || params.contexts || {};
      params.data = JSON.stringify(params.data);
      params.contentType = "application/json; charset=utf-8";
      params.dataType = "json";
      params.error = params.error || (function(_this) {
        return function(err) {
          return _this.error_function(err, params);
        };
      })(this);
      params.success = params.success || (function(_this) {
        return function(data) {
          return _this.no_success_function(data, params);
        };
      })(this);
      return $.ajax(params);
    };

    // TODO: handle informative erring out if required arguments are empty
    PDJSobj.prototype.eventV2 = function(params) {
      if (params == null) {
        params = {};
      }
      this.logg("Create an event");
      params.type = "POST";
      params.url = params.url || this.protocol + "://events." + this.server + "/v2/enqueue";
      params.data = params.data || {};

      /*
        Required params
      */
      params.data.routing_key = params.data.routing_key || params.routing_key || this.logg("No routing key");
      params.data.event_action = params.data.event_action || params.event_action || "trigger";

      /*
        Optional params
      */
      params.data.dedup_key = params.data.dedup_key || params.dedup_key;
      params.data.images = params.data.images || params.images;
      params.data.links = params.data.links || params.links;


      params.data.payload = params.data.payload ? params.data.payload : {};
      /*
        Required payload params
      */
      params.data.payload.summary = params.data.summary || params.summary;
      params.data.payload.source = params.data.source || params.source;
      params.data.payload.severity = params.data.severity || params.severity;

      /*
        Optional params
      */
      params.data.payload.timestamp = params.data.timestamp || params.timestamp;
      params.data.payload.component = params.data.component || params.component;
      params.data.payload.group = params.data.group || params.group;
      params.data.payload.class = params.data.class || params.class;
      params.data.payload.custom_details = params.data.custom_details || params.custom_details;

      params.data = JSON.stringify(params.data);
      params.contentType = "application/json; charset=utf-8";
      params.dataType = "json";
      params.error = params.error || (function(_this) {
        return function(err) {
          return _this.error_function(err, params);
        };
      })(this);
      params.success = params.success || (function(_this) {
        return function(data) {
          return _this.no_success_function(data, params);
        };
      })(this);
      return $.ajax(params);
    };

    PDJSobj.prototype.trigger = function(params) {
      if (params == null) {
        params = {};
      }
      params.event_type = "trigger";
      if (this.api_version === "V1" || this.api_version === "v1"){
        return this.eventV1(params);
      }
      return this.eventV2(params);
    };

    PDJSobj.prototype.acknowledge = function(params) {
      if (params == null) {
        params = {};
      }
      params.event_type = "acknowledge";
      if (this.api_version === "V1" || this.api_version === "v1"){
        return this.eventV1(params);
      }
      return this.eventV2(params);
    };

    PDJSobj.prototype.resolve = function(params) {
      if (params == null) {
        params = {};
      }
      params.event_type = "resolve";
      if (this.api_version === "V1" || this.api_version === "v1"){
        return this.eventV1(params);
      }
      return this.eventV2(params);
    };

    return PDJSobj;

  })();

}).call(this);

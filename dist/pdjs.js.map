{"version":3,"sources":["webpack://PagerDuty/webpack/bootstrap","webpack://PagerDuty/webpack/runtime/define property getters","webpack://PagerDuty/webpack/runtime/hasOwnProperty shorthand","webpack://PagerDuty/webpack/runtime/make namespace object","webpack://PagerDuty/./src/common.ts","webpack://PagerDuty/./src/api.ts","webpack://PagerDuty/./src/events.ts"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","request","url","options","queryParameters","requestTimeout","rest","applyParameters","URL","toString","applyTimeout","fetch_retry","headers","Headers","retries","Promise","resolve","reject","fetch","then","response","status","retryTimeout","retryTimeoutPromise","milliseconds","setTimeout","combinedParameters","searchParams","parameter","Array","isArray","forEach","item","append","keys","search","init","timeout","controller","AbortController","abort","signal","api","apiParameters","endpoint","partialParameters","partial","shorthand","method","shorthandParameters","post","put","patch","all","allInner","responses","length","next","concat","repackedResponse","shift","data","resource","repackResponses","partialCall","server","token","tokenType","version","config","Accept","Authorization","bearer","includes","toUpperCase","body","JSON","stringify","apiRequest","replace","apiResponse","json","match","resourceKey","undefined","offset","isOffsetPagination","more","limit","cursor","isCursorPagination","nextFunc","event","eventParameters","type","eventFetch","action","trigger","acknowledge","change"],"mappings":"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","file":"pdjs.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* webpack-strip-block:removed */\n\nconst VERSION = '2.0.0';\n\ntype QueryParameter = Record<string, string | Array<string>>;\n\nexport interface RequestOptions extends RequestInit {\n  queryParameters?: QueryParameter;\n  retryCount?: number;\n  requestTimeout?: number;\n  retryTimeout?: number;\n  timeout?: number;\n}\n\nexport function request(\n  url: string | URL,\n  options: RequestOptions = {}\n): Promise<Response> {\n  const {queryParameters, requestTimeout = 30000, ...rest} = options;\n\n  url = new URL(url.toString());\n\n  url = applyParameters(url, queryParameters);\n  options = applyTimeout(options, requestTimeout);\n\n  return fetch_retry(url.toString(), 3, {\n    ...rest,\n    headers: new Headers({\n      'Content-Type': 'application/json; charset=utf-8',\n      /* webpack-strip-block:removed */\n      ...rest.headers,\n    }),\n  });\n}\n\nfunction fetch_retry(\n  url: string,\n  retries: number,\n  options: RequestOptions\n): Promise<Response> {\n  return new Promise((resolve, reject) => {\n    fetch(url, options)\n      .then(response => {\n        // We don't want to `reject` when retries have finished\n        // Instead simply stop trying and return.\n        if (retries === 0) return resolve(response);\n        if (response.status === 429) {\n          const {retryTimeout = 20000} = options;\n          retryTimeoutPromise(retryTimeout).then(() => {\n            fetch_retry(url, retries - 1, options)\n              .then(resolve)\n              .catch(reject);\n          });\n        } else {\n          resolve(response);\n        }\n      })\n      .catch(reject);\n  });\n}\n\nconst retryTimeoutPromise = (milliseconds: number) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds));\n};\n\nfunction userAgentHeader(): object {\n  if (isBrowser) return {};\n\n  return {\n    'User-Agent': `pdjs/${VERSION} (${process.version}/${process.platform})`,\n  };\n}\n\nfunction applyParameters(url: URL, queryParameters?: QueryParameter): URL {\n  if (!queryParameters) return url;\n\n  const combinedParameters = url.searchParams;\n\n  for (const key of Object.keys(queryParameters)) {\n    const parameter = queryParameters[key];\n    if (Array.isArray(parameter)) {\n      // Support for array based keys like `additional_fields[]`\n      parameter.forEach(item => {\n        combinedParameters.append(key, item);\n      });\n    } else {\n      combinedParameters.append(key, parameter);\n    }\n  }\n\n  url.search = combinedParameters.toString();\n  return url;\n}\n\nfunction applyTimeout(init: RequestOptions, timeout?: number): RequestOptions {\n  if (!timeout) return init;\n\n  const controller = new AbortController();\n  setTimeout(() => controller.abort(), timeout);\n\n  return {\n    ...init,\n    signal: controller.signal,\n  };\n}\n","import {request, RequestOptions} from './common';\n\nexport interface ShorthandCall {\n  (res: string, apiParameters?: Partial<APIParameters>): APIPromise;\n}\n\nexport interface PartialCall {\n  (apiParameters: APIParameters): APIPromise;\n  (apiParameters: Partial<APIParameters>): PartialCall;\n  get: ShorthandCall;\n  post: ShorthandCall;\n  put: ShorthandCall;\n  patch: ShorthandCall;\n  delete: ShorthandCall;\n  all: ShorthandCall;\n}\n\nexport type APIParameters = RequestOptions & {\n  endpoint?: string;\n  url?: string;\n  data?: object;\n  token?: string;\n  tokenType?: string;\n  server?: string;\n  version?: number;\n} & ({endpoint: string} | {url: string});\n\nexport type APIPromise = Promise<APIResponse>;\n\nexport interface APIResponse extends Response {\n  data: any;\n  resource: any;\n  response: Response;\n  next?: () => APIPromise;\n}\n\nexport function api(apiParameters: APIParameters): APIPromise;\nexport function api(apiParameters: Partial<APIParameters>): PartialCall;\nexport function api(\n  apiParameters: Partial<APIParameters>\n): APIPromise | PartialCall {\n  // If the apiParameters don't include `endpoint` treat it as a partial\n  // application.\n  if (!apiParameters.endpoint && !apiParameters.url) {\n    return partialCall(apiParameters);\n  }\n\n  // allows for Token and Bearer token types to be used in Authorization\n  type typeMap = {\n    [key: string]: string;\n  };\n\n  const types: typeMap = {\n    bearer: 'Bearer ',\n    token: 'Token token=',\n  };\n\n  const {\n    endpoint,\n    server = 'api.pagerduty.com',\n    token,\n    tokenType = apiParameters.tokenType || 'token',\n    url,\n    version = 2,\n    data,\n    ...rest\n  } = apiParameters;\n\n  const config: RequestOptions = {\n    method: 'GET',\n    ...rest,\n    headers: {\n      Accept: `application/vnd.pagerduty+json;version=${version}`,\n      Authorization: `${types[tokenType]}${token!}`,\n      ...rest.headers,\n    },\n  };\n\n  // Allow `data` for `queryParameters` for requests without bodies.\n  if (isReadonlyRequest(config.method!) && data) {\n    config.queryParameters =\n      config.queryParameters ?? (data as Record<string, string>);\n  } else {\n    config.body = JSON.stringify(data);\n  }\n\n  return apiRequest(\n    url ?? `https://${server}/${endpoint!.replace(/^\\/+/, '')}`,\n    config\n  );\n}\n\nfunction apiRequest(url: string, options: RequestOptions): APIPromise {\n  return request(url, options).then(\n    (response: Response): APIPromise => {\n      const apiResponse = response as APIResponse;\n      apiResponse.response = response;\n\n      if (response.status === 204) {\n        return Promise.resolve(apiResponse);\n      }\n\n      return response\n        .json()\n        .then(\n          (data): APIResponse => {\n            const resource = resourceKey(url);\n            apiResponse.next = nextFunc(url, options, data);\n            apiResponse.data = data;\n            apiResponse.resource = resource ? data[resource] : null;\n            return apiResponse;\n          }\n        )\n        .catch(() => Promise.reject(apiResponse));\n    }\n  );\n}\n\nfunction resourceKey(url: string) {\n  const resource = url.match(/.+.com\\/(?<resource>[\\w]+)/);\n  if (resource) {\n    return resource[1];\n  }\n  return null;\n}\n\nfunction isReadonlyRequest(method: string) {\n  return !['PUT', 'POST', 'DELETE', 'PATCH'].includes(\n    method.toUpperCase() ?? 'GET'\n  );\n}\n\ninterface OffsetPagination {\n  type: 'offset';\n  more?: boolean;\n  offset?: number;\n  limit?: number;\n}\n\ninterface CursorPagination {\n  type: 'cursor';\n  cursor?: string;\n  limit?: number;\n}\n\nfunction isOffsetPagination(\n  data: OffsetPagination | CursorPagination\n): data is OffsetPagination {\n  if ((data as OffsetPagination).offset !== undefined) {\n    return true;\n  }\n  return false;\n}\n\nfunction isCursorPagination(\n  data: OffsetPagination | CursorPagination\n): data is CursorPagination {\n  if ((data as CursorPagination).cursor !== undefined) {\n    return true;\n  }\n  return false;\n}\n\nfunction nextFunc(\n  url: string,\n  options: RequestOptions,\n  data: OffsetPagination | CursorPagination\n) {\n  if (isOffsetPagination(data)) {\n    if (data?.more && typeof data.offset !== undefined && data.limit) {\n      return () =>\n        apiRequest(url, {\n          ...options,\n          queryParameters: {\n            ...options.queryParameters,\n            limit: data.limit!.toString(),\n            offset: (data.limit! + data.offset!).toString(),\n          },\n        });\n    }\n  } else if (isCursorPagination(data)) {\n    if (data?.cursor) {\n      return () =>\n        apiRequest(url, {\n          ...options,\n          queryParameters: {\n            ...options.queryParameters,\n            cursor: data.cursor!,\n            limit: data.limit!.toString(),\n          },\n        });\n    }\n  }\n\n  return undefined;\n}\n\nfunction partialCall(apiParameters: Partial<APIParameters>) {\n  const partialParameters = apiParameters;\n  const partial = ((apiParameters: Partial<APIParameters>) =>\n    api({...partialParameters, ...apiParameters})) as PartialCall;\n\n  const shorthand = (method: string) => (\n    endpoint: string,\n    shorthandParameters?: Partial<APIParameters>\n  ): APIPromise =>\n    api({\n      endpoint,\n      method,\n      ...partialParameters,\n      ...shorthandParameters,\n    }) as APIPromise;\n\n  partial.get = shorthand('get');\n  partial.post = shorthand('post');\n  partial.put = shorthand('put');\n  partial.patch = shorthand('patch');\n  partial.delete = shorthand('delete');\n\n  partial.all = (\n    endpoint: string,\n    shorthandParameters?: Partial<APIParameters>\n  ): APIPromise => {\n    function allInner(responses: APIResponse[]): Promise<APIResponse[]> {\n      const response = responses[responses.length - 1];\n      if (!response.next) {\n        // Base case, resolve and return all responses.\n        return Promise.resolve(responses);\n      }\n      // If there are still more resources to get then concat and repeat.\n      return response\n        .next()\n        .then(response => allInner(responses.concat([response])));\n    }\n\n    function repackResponses(responses: APIResponse[]): APIPromise {\n      // Repack the responses object to make it more user friendly.\n      const repackedResponse = responses.shift() as APIResponse; // Use the first response to build the standard response object\n      repackedResponse.data = [repackedResponse.data];\n      responses.forEach(response => {\n        repackedResponse.data = repackedResponse.data.concat(response.data);\n        repackedResponse.resource = repackedResponse.resource.concat(\n          response.resource\n        );\n      });\n      return Promise.resolve(repackedResponse);\n    }\n\n    const method = 'get';\n    return (api({\n      endpoint,\n      method,\n      ...partialParameters,\n      ...shorthandParameters,\n    }) as APIPromise)\n      .then(response => allInner([response]))\n      .then(responses => repackResponses(responses));\n  };\n\n  return partial;\n}\n","import {request, RequestOptions} from './common';\n\nexport type Action = 'trigger' | 'acknowledge' | 'resolve';\n\nexport type EventPromise = Promise<EventResponse>;\n\nexport interface EventResponse extends Response {\n  data: any;\n  response: Response;\n}\n\nexport type Severity = 'critical' | 'error' | 'warning' | 'info';\n\nexport interface Image {\n  src: string;\n  href?: string;\n  alt?: string;\n}\n\nexport interface Link {\n  href: string;\n  text?: string;\n}\n\nexport interface EventPayloadV2 {\n  routing_key: string;\n  event_action: Action;\n  dedup_key?: string;\n  payload: {\n    summary: string;\n    source: string;\n    severity: Severity;\n    timestamp?: string;\n    component?: string;\n    group?: string;\n    class?: string;\n    custom_details?: object;\n  };\n  images?: Array<Image>;\n  links?: Array<Link>;\n}\n\nexport interface EventParameters extends RequestOptions {\n  data: EventPayloadV2;\n  type?: string;\n  server?: string;\n}\n\nexport interface ChangePayload {\n  routing_key: string;\n  payload: {\n    summary: string;\n    source?: string;\n    timestamp: string;\n    custom_details: object;\n  };\n  links: Array<Link>;\n}\nexport interface ChangeParameters extends RequestOptions {\n  data: ChangePayload;\n  server?: string;\n}\n\nexport function event(eventParameters: EventParameters): EventPromise {\n  const {\n    server = 'events.pagerduty.com',\n    type = 'event',\n    data,\n    ...config\n  } = eventParameters;\n\n  let url = `https://${server}/v2/enqueue`;\n  if (type === 'change') {\n    url = `https://${server}/v2/change/enqueue`;\n  }\n\n  return eventFetch(url, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    ...config,\n  });\n}\n\nconst shorthand = (action: Action) => (\n  eventParameters: EventParameters\n): EventPromise => {\n  const typeField = 'event_action';\n\n  return event({\n    ...eventParameters,\n    data: {\n      ...eventParameters.data,\n      [typeField]: action,\n    },\n  });\n};\n\nexport const trigger = shorthand('trigger');\nexport const acknowledge = shorthand('acknowledge');\nexport const resolve = shorthand('resolve');\nexport const change = (eventParameters: EventParameters) =>\n  event({...eventParameters, type: 'change'});\n\nfunction eventFetch(url: string, options: RequestOptions): EventPromise {\n  return request(url, options).then(\n    (response: Response): EventPromise => {\n      const apiResponse = response as EventResponse;\n      return response.json().then(\n        (data): EventResponse => {\n          apiResponse.data = data;\n          apiResponse.response = response;\n          return apiResponse;\n        }\n      );\n    }\n  );\n}\n"],"sourceRoot":""}